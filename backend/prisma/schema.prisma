// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  name             String
  email            String          @unique
  contacts         Contact[]       @relation("UserToContacts") // Users this user has added
  contactOf        Contact[]       @relation("ContactToUsers") // Users who have added this user
  messagesSent     Message[]       @relation("MessageFrom")
  messagesReceived Message[]       @relation("MessageTo")
  sentRequests     FriendRequest[] @relation("SenderRequests")
  receivedRequests FriendRequest[] @relation("ReceiverRequests")
  password         String //hashed
}

model Contact {
  id        Int @id @default(autoincrement())
  userId    Int
  contactId Int

  user    User @relation("UserToContacts", fields: [userId], references: [id]) // Forward relation
  contact User @relation("ContactToUsers", fields: [contactId], references: [id]) // Reverse relation

  @@unique([userId, contactId])
}

model FriendRequest {
  id         Int    @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     String @default("pending") // 'pending', 'accepted', 'rejected'

  sender   User @relation("SenderRequests", fields: [senderId], references: [id])
  receiver User @relation("ReceiverRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

model Message {
  fromUserId Int
  toUserId   Int
  content    String?
  createdAt  DateTime @default(now())
  imageUrl   String?

  from User @relation("MessageFrom", fields: [fromUserId], references: [id])
  to   User @relation("MessageTo", fields: [toUserId], references: [id])

  @@id([fromUserId, toUserId, createdAt]) // Composite primary key
}
